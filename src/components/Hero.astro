---
// Hero Section Component
---

<section id="inicio" class="hero">
  <div class="hero-background">
    <div class="hero-overlay"></div>
  </div>
  
  <div class="container">
    <div class="hero-content fade-in">
      <h1 class="hero-title">
        Defendemos sus Derechos con
        <span class="text-accent">Excelencia y Dedicación</span>
      </h1>
      <p class="hero-subtitle">
        Más de 25 años de experiencia brindando asesoría legal de primera calidad. 
        Nuestro compromiso es proteger sus intereses con la máxima profesionalidad.
      </p>
      <div class="hero-actions">
        <a href="#contacto" class="btn btn-primary btn-lg">Consulta Gratuita</a>
        <a href="#sobre-nosotros" class="btn btn-outline btn-lg">Conoce Más</a>
      </div>
      
      <div class="hero-stats">
        <div class="stat-item">
          <div class="stat-number" data-target="1500">0</div>
          <div class="stat-label">Casos Exitosos</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" data-target="25">0</div>
          <div class="stat-label">Años de Experiencia</div>
        </div>
        <div class="stat-item">
          <div class="stat-number" data-target="98">0</div>
          <div class="stat-label">% Casos Ganados</div>
        </div>
      </div>
    </div>
  </div>
</section>

<style>
  .hero {
    min-height: 100vh;
    display: flex;
    align-items: center;
    position: relative;
    overflow: hidden;
  }
  
  .hero-background {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: url('/images/hero-bg.jpg') center/cover no-repeat;
    z-index: -2;
  }
  
  .hero-overlay {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background: linear-gradient(135deg, rgba(31, 44, 61, 0.85) 0%, rgba(31, 44, 61, 0.7) 100%);
    z-index: -1;
  }
  
  .hero-content {
    text-align: center;
    color: var(--color-white);
    max-width: 800px;
    margin: 0 auto;
    padding-top: 80px;
  }
  
  .hero-title {
    font-size: 3.5rem;
    font-weight: 700;
    margin-bottom: 1.5rem;
    line-height: 1.1;
  }
  
  .text-accent {
    color: var(--color-accent);
  }
  
  .hero-subtitle {
    font-size: 1.25rem;
    margin-bottom: 2.5rem;
    opacity: 0.9;
    max-width: 600px;
    margin-left: auto;
    margin-right: auto;
  }
  
  .hero-actions {
    display: flex;
    gap: 1rem;
    justify-content: center;
    margin-bottom: 4rem;
    flex-wrap: wrap;
  }
  
  .btn-lg {
    padding: 15px 35px;
    font-size: 1.1rem;
  }
  
  .hero-stats {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    gap: 2rem;
    max-width: 600px;
    margin: 0 auto;
  }
  
  .stat-item {
    text-align: center;
  }
  
  .stat-number {
    font-size: 2.5rem;
    font-weight: 700;
    color: var(--color-accent);
    font-family: var(--font-heading);
  }
  
  .stat-label {
    font-size: 0.9rem;
    opacity: 0.8;
    margin-top: 0.5rem;
  }
  
  @media (max-width: 768px) {
    .hero-title {
      font-size: 2.5rem;
    }
    
    .hero-subtitle {
      font-size: 1.1rem;
    }
    
    .hero-actions {
      flex-direction: column;
      align-items: center;
    }
    
    .btn-lg {
      width: 100%;
      max-width: 300px;
    }
    
    .hero-stats {
      grid-template-columns: 1fr;
      gap: 1.5rem;
    }
    
    .stat-number {
      font-size: 2rem;
    }
  }
  
  @media (max-width: 480px) {
    .hero-title {
      font-size: 2rem;
    }
    
    .hero-content {
      padding-top: 60px;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    // Animación de contadores
    const animateCounters = () => {
      const counters = document.querySelectorAll('.stat-number[data-target]');
      
      counters.forEach(counter => {
        const target = parseInt(counter.getAttribute('data-target') || '0');
        const duration = 2000;
        const step = target / (duration / 16);
        let current = 0;
        
        const updateCounter = () => {
          current += step;
          if (current < target) {
            counter.textContent = Math.floor(current).toString();
            requestAnimationFrame(updateCounter);
          } else {
            counter.textContent = target.toString();
          }
        };
        
        updateCounter();
      });
    };
    
    // Iniciar animación cuando la sección sea visible
    const heroSection = document.querySelector('.hero');
    const observer = new IntersectionObserver((entries) => {
      entries.forEach(entry => {
        if (entry.isIntersecting) {
          setTimeout(animateCounters, 500);
          observer.unobserve(entry.target);
        }
      });
    }, { threshold: 0.5 });
    
    if (heroSection) {
      observer.observe(heroSection);
    }
  });
</script>
